"""
    Yieldster SDK API

    Swagger documentation for Yieldster 2.0 SDK API's  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from PythonNew1.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from PythonNew1.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from PythonNew1.openapi_client.model.response import Response


class ADDTRANSACTIONDETAILSSERVICEApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_by_transaction_hash_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/delete-transaction-by-hash',
                'operation_id': 'delete_by_transaction_hash',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'old_txn_hash',
                ],
                'required': [
                    'old_txn_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'old_txn_hash':
                        (str,),
                },
                'attribute_map': {
                    'old_txn_hash': 'oldTxnHash',
                },
                'location_map': {
                    'old_txn_hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_details_by_hash_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/get-transaction-by-hash',
                'operation_id': 'get_transaction_details_by_hash',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'txn_hash',
                ],
                'required': [
                    'txn_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'txn_hash':
                        (str,),
                },
                'attribute_map': {
                    'txn_hash': 'txnHash',
                },
                'location_map': {
                    'txn_hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_transaction_details_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/save-transaction-details',
                'operation_id': 'set_transaction_details',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'block_numer',
                    'txn_hash',
                    'txn_type',
                    'txn_chain',
                    'txn_data',
                    'wallet',
                    'from_address',
                    'to_address',
                    'signer_address',
                    'tag',
                ],
                'required': [
                    'block_numer',
                    'txn_hash',
                    'txn_type',
                    'txn_chain',
                    'txn_data',
                    'wallet',
                    'from_address',
                    'to_address',
                    'signer_address',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                    'txn_type',
                    'txn_chain',
                    'wallet',
                    'tag',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('txn_type',): {

                        "DEPOSIT": "DEPOSIT",
                        "WITHDRAW": "WITHDRAW",
                        "SWAP": "SWAP",
                        "PROTOCOL_INTERACTION": "PROTOCOL_INTERACTION"
                    },
                    ('txn_chain',): {

                        "ETHEREUM": "ETHEREUM",
                        "BINANCE": "BINANCE",
                        "POLYGON": "POLYGON",
                        "AVALANCHE": "AVALANCHE"
                    },
                    ('wallet',): {

                        "GNOSIS": "GNOSIS"
                    },
                    ('tag',): {

                        "NORMAL": "NORMAL",
                        "GNOSIS": "GNOSIS"
                    },
                },
                'openapi_types': {
                    'block_numer':
                        (int,),
                    'txn_hash':
                        (str,),
                    'txn_type':
                        (str,),
                    'txn_chain':
                        (str,),
                    'txn_data':
                        (str,),
                    'wallet':
                        (str,),
                    'from_address':
                        (str,),
                    'to_address':
                        (str,),
                    'signer_address':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'block_numer': 'blockNumer',
                    'txn_hash': 'txnHash',
                    'txn_type': 'txnType',
                    'txn_chain': 'txnChain',
                    'txn_data': 'txnData',
                    'wallet': 'wallet',
                    'from_address': 'fromAddress',
                    'to_address': 'toAddress',
                    'signer_address': 'signerAddress',
                    'tag': 'tag',
                },
                'location_map': {
                    'block_numer': 'query',
                    'txn_hash': 'query',
                    'txn_type': 'query',
                    'txn_chain': 'query',
                    'txn_data': 'query',
                    'wallet': 'query',
                    'from_address': 'query',
                    'to_address': 'query',
                    'signer_address': 'query',
                    'tag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.transaction_scheduler_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/transaction-scheduler',
                'operation_id': 'transaction_scheduler',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_temporary_transaction_hash_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/update-temporary-transaction-hash',
                'operation_id': 'update_temporary_transaction_hash',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'old_txn_hash',
                    'new_txn_hash',
                ],
                'required': [
                    'old_txn_hash',
                    'new_txn_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'old_txn_hash':
                        (str,),
                    'new_txn_hash':
                        (str,),
                },
                'attribute_map': {
                    'old_txn_hash': 'oldTxnHash',
                    'new_txn_hash': 'newTxnHash',
                },
                'location_map': {
                    'old_txn_hash': 'query',
                    'new_txn_hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_transaction_hash_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/transaction-details/v2.0/yieldster/update-transaction-hash',
                'operation_id': 'update_transaction_hash',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'old_txn_hash',
                    'new_txn_hash',
                ],
                'required': [
                    'old_txn_hash',
                    'new_txn_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'old_txn_hash':
                        (str,),
                    'new_txn_hash':
                        (str,),
                },
                'attribute_map': {
                    'old_txn_hash': 'oldTxnHash',
                    'new_txn_hash': 'newTxnHash',
                },
                'location_map': {
                    'old_txn_hash': 'query',
                    'new_txn_hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def delete_by_transaction_hash(
        self,
        old_txn_hash,
        **kwargs
    ):
        """API to delete transaction details by transaction hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_by_transaction_hash(old_txn_hash, async_req=True)
        >>> result = thread.get()

        Args:
            old_txn_hash (str): hash of the transaction to be delted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['old_txn_hash'] = \
            old_txn_hash
        return self.delete_by_transaction_hash_endpoint.call_with_http_info(**kwargs)

    def get_transaction_details_by_hash(
        self,
        txn_hash,
        **kwargs
    ):
        """API to get transaction details using transaction hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_details_by_hash(txn_hash, async_req=True)
        >>> result = thread.get()

        Args:
            txn_hash (str): hash of the transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['txn_hash'] = \
            txn_hash
        return self.get_transaction_details_by_hash_endpoint.call_with_http_info(**kwargs)

    def set_transaction_details(
        self,
        block_numer,
        txn_hash,
        txn_type,
        txn_chain,
        txn_data,
        from_address,
        to_address,
        signer_address,
        tag,
        wallet="GNOSIS",
        **kwargs
    ):
        """API to save transaction details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_transaction_details(block_numer, txn_hash, txn_type, txn_chain, txn_data, from_address, to_address, signer_address, tag, wallet="GNOSIS", async_req=True)
        >>> result = thread.get()

        Args:
            block_numer (int): block number of the transaction
            txn_hash (str): hash of the transaction
            txn_type (str): type of the transaction
            txn_chain (str): chain in which transaction occured
            txn_data (str): transaction data
            from_address (str): origin address of the transaction
            to_address (str): destination address of the transaction
            signer_address (str): address used for signing the transaction
            tag (str): Source of transaction like multisig
            wallet (str): type of the wallet used for transaction. defaults to "GNOSIS", must be one of ["GNOSIS"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['block_numer'] = \
            block_numer
        kwargs['txn_hash'] = \
            txn_hash
        kwargs['txn_type'] = \
            txn_type
        kwargs['txn_chain'] = \
            txn_chain
        kwargs['txn_data'] = \
            txn_data
        kwargs['wallet'] = \
            wallet
        kwargs['from_address'] = \
            from_address
        kwargs['to_address'] = \
            to_address
        kwargs['signer_address'] = \
            signer_address
        kwargs['tag'] = \
            tag
        return self.set_transaction_details_endpoint.call_with_http_info(**kwargs)

    def transaction_scheduler(
        self,
        **kwargs
    ):
        """API to update transaction details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transaction_scheduler(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.transaction_scheduler_endpoint.call_with_http_info(**kwargs)

    def update_temporary_transaction_hash(
        self,
        old_txn_hash,
        new_txn_hash,
        **kwargs
    ):
        """API to update temporary transaction hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_temporary_transaction_hash(old_txn_hash, new_txn_hash, async_req=True)
        >>> result = thread.get()

        Args:
            old_txn_hash (str): old hash of the transaction
            new_txn_hash (str): new hash of the transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['old_txn_hash'] = \
            old_txn_hash
        kwargs['new_txn_hash'] = \
            new_txn_hash
        return self.update_temporary_transaction_hash_endpoint.call_with_http_info(**kwargs)

    def update_transaction_hash(
        self,
        old_txn_hash,
        new_txn_hash,
        **kwargs
    ):
        """API to update transaction hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transaction_hash(old_txn_hash, new_txn_hash, async_req=True)
        >>> result = thread.get()

        Args:
            old_txn_hash (str): old hash of the transaction
            new_txn_hash (str): new hash of the transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['old_txn_hash'] = \
            old_txn_hash
        kwargs['new_txn_hash'] = \
            new_txn_hash
        return self.update_transaction_hash_endpoint.call_with_http_info(**kwargs)

